const float PI = 3.1415926;

precision mediump float;

attribute vec2 vertPos;

uniform mat4 modelMat;
uniform mat4 viewMat;
uniform mat4 projMat;
uniform int squareState;
uniform float t;
uniform float hp;

varying vec2 squarePos;

float circularIn(float t) {
    return 1.0 - t * t;
}

float softEdge(float t, float buffer) {
    float r = t < 1.0 - 2.0 * buffer ? 1.0 : t > 1.0 ? 0.0 : 1.0 - (t - (1.0 - 2.0 * buffer)) / 0.1;
    return r * r;
}

export void vertex() {
    gl_Position = projMat * viewMat * modelMat * vec4(vertPos, 0, 1);
    squarePos = vertPos;
}

export void playerFrag() {
    vec2 offset = squarePos - 0.5;

    float alpha = softEdge(distance(vec2(0, 0), offset) * 2.0, 0.05);

    gl_FragColor = mix(vec4(1, 0, 0, alpha), vec4(0, 1, 0, alpha), hp);
}

export void enemyFrag() {
    vec2 offset = squarePos - 0.5;

    float alpha = softEdge(distance(vec2(0, 0), offset) * 2.0, 0.05);

    gl_FragColor = vec4(1, 0, 0, alpha);
}

export void proximityFrag() {
    vec2 offset = squarePos - 0.5;

    float alpha = softEdge(distance(vec2(0, 0), offset) * 2.0, 0.02);

    gl_FragColor = vec4(0.3, 0.3, 0.7, alpha);
}

export void explosionFrag() {
    vec2 offset = squarePos - 0.5;

    float alpha = softEdge(distance(vec2(0, 0), offset) * 2.0, 0.02);

    gl_FragColor = vec4(0.8, 0, 0, alpha);
}


export void shadowFrag() {
    const float alpha = 1.0;
    gl_FragColor = mix(vec4(0, 0, 0, alpha), vec4(1, 1, 1, alpha), hp > 1.0 ? (hp - 1.0) * 2.0 : 0.0);
}

export void bulletFrag() {
    vec2 offset = squarePos - 0.5;

    float dist = distance(vec2(0, 0), offset) * 2.0;

    float alpha = softEdge(dist, 0.05) * 2.0;

    float blue = (atan(offset.y / offset.x) + 1.0) / (2.0);

    gl_FragColor = mix(vec4(0.1, 0.1, 0.1, alpha), vec4(0.2, 0.3, 0.8, alpha), blue);
}

float waver(float t) {
    return (1.0+0.2*sin(0.005*t) + 0.05*sin(0.8*t) + 0.4 * sin(0.024*t) + 0.2 * sin(0.1*t)) / 10.0;
}

export void indicatorFrag() {
    vec2 offset = squarePos - 0.5;

    float alpha = softEdge(distance(vec2(0, 0), offset) * 2.0, 0.05);

    gl_FragColor = vec4(0, 0.75, 0.75, alpha * 0.85 * t);
}

export void flashlightFrag() {
    vec2 offset = squarePos - 0.5;

    float mod = hp > 1.0 ? hp - 1.0 : hp;
    float alpha = 1.0 - circularIn(distance(vec2(0, 0), offset / (0.55 * hp)));

    alpha += waver(t);

    gl_FragColor = mix(vec4(0, 0, 0, alpha), vec4(1, 1, 1, 1), hp > 1.0 ? (hp - 1.0) * 2.0 : 0.0);
}

export void hallFrag() {
    vec4 wall = vec4(0, 0, 0, 1);
    vec4 hall = vec4(1, 1, 1, 1);


    if (squareState == 0) {

        if (mod((squarePos.x - squarePos.y) * 10.0, 2.0) > 1.0) {
            hall = vec4(1, 1, 0, 1);
        } else {
            hall = vec4(0.2, 0.2, 0.2, 1);
        }
    } else if (squareState == 1) {
        if ((mod(squarePos.x * 10.0, 2.0) > 1.0 && mod(squarePos.y * 10.0, 2.0) > 1.0) || (mod(squarePos.x * 10.0, 2.0) < 1.0 && mod(squarePos.y * 10.0, 2.0) < 1.0)) {
            hall = vec4(1, 1, 1, 1);
        } else {
            hall = vec4(0, 0, 0, 1);
        }
    } else if (squareState == 2) {
        hall = vec4(0.5, 0.5, 0.5, 1);
    }

    vec4 color = mix(vec4(0.5, 0.5, 0.5, 1), hall, 1.0 - circularIn(squareState < 2 ? 1.0 : t));
    gl_FragColor = color;
}